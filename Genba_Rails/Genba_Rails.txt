## chapter1 RailsのためのRuby入門

#### オブジェクトを理解しよう

オブジェクト 「もの」のようなもの
Ruby オブジェクトを使ったりすることで、コンピューターに望んだ処理をさせる

1+3
=4

1というオブジェクトに3というオブジェクトを足して下さい
1というオブジェクトが足し算を実行して、結果を表す4という別のオブジェクトを返した

クラス オブジェクトの原型

例
自分も友達も一人一人は、異なる人間(異なるオブジェクト)
しかし、全員が人間である。(人間というクラス)


オブジェクトはすべてがobject_idという固有の番号を持つ

氏名.object_id
=70291392970800

1.object_id
=3


もう一度実行すると、、、

氏名.object_id
= 7020805146000

1.object_id
=3

氏名というobjectに対して作られる文字列オブジェクトはRubyが実行されるたびに別のobjectが作られる
1というobjectに対して作られる数値オブジェクトは同じオブジェクトが提供される

オブジェクト指向言語では、、、

オブジェクトxのクラスがAであるとき、
xはAのインスタンス(オブジェクト)であるという

オブジェクトの機能はクラスで決まる

"氏名".length
=>2

1.length
=> No method error

氏名はStringクラスのオブジェクトより、lengthで文字列を尋ねれる
1はIntegerクラスより、文字数を尋ねることができない


オブジェクトの仕事: 何らかの振る舞いをすること
Rubyのオブジェクトの振る舞いはメソッドとして記述する

メソッド: ～をしますというような内容を記述することになる。

例: 猫のタマはネズミを追いかける能力を持っているをRubyで書くと,,,
    タマ.追いかける(ネズミ)

ネズミ: メソッドに対して補足的な情報を与える引数
タマ: メソッドが持つオブジェクト , レシーバ

クラス名.new : クラス名のオブジェクトを作る

メソッドの途中でメソッドを抜けたい時 => returnを使う
メソッドの最後で返り値を指定する     => returnを使わない

インスタンス変数: オブジェクトごとに異なるデータを保持できるようにする

ゲッター: インスタンス変数の内容を参照する為のメソッド

ローカル変数: 1つのメソッドの中で一時的に使うデータを参照する時に使う
インスタンス変数: 特定のオブジェクトの内部で使い回す , そのオブジェクトに属するデータとして外部からゲッターを通じて利用するために用いる

属性: オブジェクトの抱えるデータ

Ruby条件式; nilとfalseが偽 , それ以外が真(0も真)

value = 0
if value => 真

end

継承:
既存のクラスが持っている機能を基本的に全部引き継いだ上で一部を変えたい時に使う
継承されるクラス: スーパークラス , 親クラス
継承しているクラス: 子クラス , サブクラス

オーバーライド:子クラスが親クラスが持つメソッドを上書きすること

super: 子クラスが親クラスが持つ同名のメソッドを呼び出す時に使う

モジュール: ある一連の設計図を一箇所にまとめた存在
モジュールは、オブジェクトを生成できない

モジュールとクラスの継承 違い:
クラスはインスタンスが生成でき、モジュールはインスタンスが生成できない
クラスは継承でき、モジュールは継承できない
(モジュールは、メソッドのコピペのイメージ)

nilガード
number || =10

number || (number = 10)と同じ動き
もしもnumberがあればnumberなければnumberに10を代入した上でのnumber

利用法;
def children
  @childlen || = []
end

@childrenがnilでも空の配列が[]が代入されて返される


ぼっち演算子:
&.という演算子を使ってメソッドを呼び出すとレシーバーがnilでもエラーを返さなくなる


%記法:
%w: 全ての要素が文字列の配列を表す(要素の""を省略できる)
%i: 全ての要素シンボルの配列を表す(要素の:を省略できる)



配列の各要素から特定の属性だけを取り出す
names = users.map do |user|
   user.name
end

map: 配列の各要素にブロック内の処理を行った結果を格納した新しい配列を作成する