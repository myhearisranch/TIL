セキュリティを強化する:
Strong Parameters: 意図しないパラメータを弾く(想定通りのパラメータかどうかをホワイトリスト方式でチェックする機能)

マスアサイメント機能: 複数の属性を一括で代入できるモデルの便利な機能
例: nameとdescriptionという2つの属性に値を一括で代入している
task = Task.new(name: 'ラーメン食べたい',description: '今すぐ食べたい')

パラメータに意図せぬ属性が紛れ込んでいるときに、その想定外の属性についても登録・更新が行えてしまうという問題がある
例: Taskにはspecialというフラグがあって、その値がtrueのときには、タスクを目立たせる事ができる。
    しかし、このフラグをtrueにできるのは、有料ユーザーであるとする
    この時、有料ユーザーでなくてもspecialフラグがtrueになるようなリクエストを送る事は技術的に可能
    =>お金を払わなくても有料ユーザー限定機能を使われてしまう

これを防ぐために、パラメータのどの属性を許可してどの属性を弾くのかを制御する必要がある
この時に利用するのが、StrongParametersという機能

task_params = if user.permit?
  params.require(:task).permit(:name, :description, :special)
else
  params.require(:task).permit(:name, :description)
end

userが有料ユーザー(「premium? == true」なユーザー)かどうかで許可する属性の
顔ぶれを変更してある。

CSRF対策を利用する:
CSRF: 別のwebサイト上に用意したコンテンツのリンクを踏んだり、
      画像を表示したりしたことをきっかけに、ユーザーがログインしているwebアプリケーションに悪意ある操作を行う攻撃
      ログイン状態でなければできない操作を、外部のサイトから実行させる
      例: 外部のサイトにwebアプリケーションの退会リンクを仕込んでおき、それをユーザーがクリックしたとする
          その時点で、もしそのユーザーがそのwebアプリケーションにログインした状態と同じCookie情報がブラウザから送られるため、
          webアプリケーションにとっては、本当にログインしたユーザーが退会操作をしたのと区別がつかず、退会操作が実行される

CSRFを防ぐには、webアプリケーションから生じたリクエストであることを証明するためのセキュリティトークンを発行して照合する
(GETリクエストには適用されない=>GETは単純な情報の読み出しの為に使う)

インジェクション: webアプリケーションに悪意のあるスクリプトやパラメータを入力し、
                 それが評価されるときの権限で実行される
                  標的はユーザーが入力可能なところ全て(フォーム, リクエストパラメータ)

SQLインジェクション: データ入力時に悪意のあるSQLを入力することで攻撃を試みる
                     例: ユーザー名の入力欄に「'OR'1') --」という文字列を入力したとする
                         この入力値をparams[:user_name]として受け取って次のようにデータベースを検索するコードがあるとする

                         email = User.where("name = "#{params[:user_name]}").map(&:email)
                         入力値をそのまま埋め込んでいるので次のような文字列が作成されて実行される

                         SELECT "users". * FROM "users" WHERE (name = '' OR '1')--')

                         SQL「'OR'!') --」が巧妙に埋め込まれることになる、
                         いつも真となる「OR '1'」という検索条件が追加される
                         「--」以降はSQLでは全てコメントとみなされるので、
                         他の条件が続いた場合もそれらを無視出来てしまう
                         => そのままSQLに埋め込むのではなく、エスケープなどの加工を行う

基本的には、ハッシュで条件を指定する
users = User.where(name: params[:name])

Rubyコードインジェクション:
ユーザーからの入力をそのままsendに渡すことは避ける
users = User.send(params[:scope])