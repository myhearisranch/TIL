アセットパイプライン:
JavaScript , CSS , 画像などのリソースを効率的に使う仕組み

1 users.js.coffee => users.js
  tasks.js.coffee => tasks.js

  高級言語のコンパイル
  CoffeeScript , SCSS , ERB , Slimなどで記述されたコードをコンパイルして、
  ブラウザが認識できるJavaScript、CSSファイルとして扱う

2 users.js
           =>  application.js
  tasks.js

  アセットの連結
  複数のJavaScript , CSSファイルを1つのファイルに連結することで
  読み込みに必要となるリクエスト数を減らし、全ての読み込みが終わる時間を減らす

3 application.js => application.js(最小化されている)
 
  アセットの最小化:
  スペース , 改行 , コメントを削除してファイルを最小化し、通信量を節約する

4 application.js(最小化されている) => application-b3309dd8b9....js
  
  ダイジェストの付与:
  コードの内容からハッシュ値を算出し、ファイルの末尾に付与する
  =>コードが変更されればファイル名が変更されるため、ブラウザのキャッシュの影響で修正が反映されないという問題を防げる

環境による挙動の違い:
アセットパイプラインはdevelop環境 , production環境で挙動が異なる

ブラウザにアセットを読み込ませる:
CSSやJavaScriptなどのアセットは、通常、web画面にアクセスしたブラウザが、
サーバから返されたHTMLタグ内にあるscriptタグ , linkタグなどのリンク情報を読み取る事で利用できる

CSS: stylesheet_link_tag ,  JavaScript: javascript_include_tagというヘルパーメソッドを使って読み込まれる
第一引数に読み込みたいアセットファイルを指定する。

連結結果のファイルをどうやって生成するのか:
連結して出力する方法は、マニフェストファイルに記述する


マニフェストファイルを記述する:

アセットパイプラインの結合の機能を利用するために
具体的にどのソースコード同士を連結するのかを決め、アセットパイプラインに伝える必要がある
=>これをマニフェストファイルに記述して行う

JavaScriptのマニフェストファイル
//= require rails-ujs
//= require activestrage
//= require turbolinks
//= require_tree .

//= で始める行を、アセットパイプラインに指示を伝えるための特別な行として扱う

require: 指示したJavaScriptファイルの内容を、記述した位置に取り込む , 拡張子は省略できる
require_tree: 指定されたディレクトリ配下の全ファイルの内容を結合し、記述した位置に取り込む
